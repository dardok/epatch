--- a/lustre/utils/lhsmtool_posix.c	2017-05-17 07:27:16.322567715 -0400
+++ b/lustre/utils/lhsmtool_posix.c	2017-05-17 08:15:16.755008980 -0400
@@ -1467,7 +1467,7 @@
 static int ct_import_recurse(const char *relpath)
 {
 	DIR		*dir;
-	struct dirent	 ent, *cookie = NULL;
+	struct dirent	*ent;
 	char		*srcpath, *newpath;
 	lustre_fid	 import_fid;
 	int		 rc;
@@ -1505,30 +1505,33 @@
 	free(srcpath);
 
 	while (1) {
-		rc = readdir_r(dir, &ent, &cookie);
-		if (rc != 0) {
-			rc = -errno;
-			CT_ERROR(rc, "cannot readdir_r '%s'", relpath);
-			err_major++;
-			goto out;
-		} else if ((rc == 0) && (cookie == NULL)) {
-			/* end of directory */
-			break;
+		errno = 0;
+		ent = readdir(dir);
+		if (ent == NULL) {
+			if (errno != 0) {
+				rc = -errno;
+				CT_ERROR(rc, "cannot readdir '%s'", relpath);
+				err_major++;
+				goto out;
+			} else {
+				/* end of directory */
+				break;
+			}
 		}
 
-		if (!strcmp(ent.d_name, ".") ||
-		    !strcmp(ent.d_name, ".."))
+		if (!strcmp(ent->d_name, ".") ||
+		    !strcmp(ent->d_name, ".."))
 			continue;
 
 		/* New relative path */
-		newpath = path_concat(relpath, ent.d_name);
+		newpath = path_concat(relpath, ent->d_name);
 		if (newpath == NULL) {
 			err_major++;
 			rc = -ENOMEM;
 			goto out;
 		}
 
-		if (ent.d_type == DT_DIR) {
+		if (ent->d_type == DT_DIR) {
 			rc = ct_import_recurse(newpath);
 		} else {
 			char src[PATH_MAX];
@@ -1703,9 +1706,9 @@
 static int ct_dir_level_max(const char *dirpath, __u16 *sub_seqmax)
 {
 	DIR		*dir;
-	int		 rc;
+	int		 rc = 0;
 	__u16		 sub_seq;
-	struct dirent	 ent, *cookie = NULL;
+	struct dirent	 *ent;
 
 	*sub_seqmax = 0;
 
@@ -1716,27 +1719,24 @@
 		return rc;
 	}
 
-	while ((rc = readdir_r(dir, &ent, &cookie)) == 0) {
-		if (cookie == NULL)
-			/* end of directory.
-			 * rc is 0 and seqmax contains the max value. */
-			goto out;
-
-		if (!strcmp(ent.d_name, ".") || !strcmp(ent.d_name, ".."))
+	errno = 0;
+	while ((ent = readdir(dir)) != NULL) {
+		if (!strcmp(ent->d_name, ".") || !strcmp(ent->d_name, ".."))
 			continue;
 
-		if (sscanf(ent.d_name, "%hx", &sub_seq) != 1) {
+		if (sscanf(ent->d_name, "%hx", &sub_seq) != 1) {
 			CT_TRACE("'%s' has an unexpected dirname format, "
-				 "skip entry", ent.d_name);
+				 "skip entry", ent->d_name);
 			continue;
 		}
 		if (sub_seq > *sub_seqmax)
 			*sub_seqmax = sub_seq;
 	}
-	rc = -errno;
-	CT_ERROR(rc, "cannot readdir_r '%s'", dirpath);
+	if (errno != 0) {
+		rc = -errno;
+		CT_ERROR(rc, "cannot readdir '%s'", dirpath);
+	}
 
-out:
 	closedir(dir);
 	return rc;
 }
--- a/lustre/utils/liblustreapi.c	2017-05-17 07:27:16.323567724 -0400
+++ b/lustre/utils/liblustreapi.c	2017-05-17 07:52:48.623060337 -0400
@@ -1234,8 +1234,7 @@
 	char *fsname;
         char *ptr;
         DIR *dir;
-        struct dirent pool;
-        struct dirent *cookie = NULL;
+        struct dirent *pool;
         int rc = 0;
         unsigned int nb_entries = 0;
         unsigned int used = 0;
@@ -1288,19 +1287,22 @@
 	}
 
 	while(1) {
-		rc = readdir_r(dir, &pool, &cookie);
-		if (rc != 0) {
-			rc = -errno;
-			llapi_error(LLAPI_MSG_ERROR, rc,
-				    "Error reading pool list for '%s'", name);
-			goto free_path;
-		} else if ((rc == 0) && (cookie == NULL)) {
-			/* end of directory */
-			break;
+		errno = 0;
+		pool = readdir(dir);
+		if (pool == NULL) {
+			if (errno != 0) {
+				rc = -errno;
+				llapi_error(LLAPI_MSG_ERROR, rc,
+				    	"Error reading pool list for '%s'", name);
+				goto free_dir;
+			} else {
+				/* end of directory */
+				break;
+			}
 		}
 
                 /* ignore . and .. */
-                if (!strcmp(pool.d_name, ".") || !strcmp(pool.d_name, ".."))
+                if (!strcmp(pool->d_name, ".") || !strcmp(pool->d_name, ".."))
                         continue;
 
                 /* check output bounds */
@@ -1310,15 +1312,15 @@
 		}
 
                 /* +2 for '.' and final '\0' */
-		if (used + strlen(pool.d_name) + strlen(fsname) + 2
+		if (used + strlen(pool->d_name) + strlen(fsname) + 2
 		    > buffer_size) {
 			rc = -EOVERFLOW;
 			goto free_dir;
 		}
 
-                sprintf(buffer + used, "%s.%s", fsname, pool.d_name);
+                sprintf(buffer + used, "%s.%s", fsname, pool->d_name);
                 poollist[nb_entries] = buffer + used;
-                used += strlen(pool.d_name) + strlen(fsname) + 2;
+                used += strlen(pool->d_name) + strlen(fsname) + 2;
                 nb_entries++;
         }
 
